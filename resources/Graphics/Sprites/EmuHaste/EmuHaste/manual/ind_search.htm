<HTML>
<HEAD><TITLE>SEARCH INDEX</TITLE></HEAD>
<BODY>
<h2>変動アドレスのサーチ方法</h2>
DSの場合、わずか4メガバイトのメモリをやり繰りする必要があるため、<br>
プログラムによってはパラメータ格納アドレスが変動することがあります。<br><br>

(例1) [キャラ2バイト×3人] + [敵2バイト×2人] + [マップ4バイト]<br>
<pre>
Address +00+01+02+03+04+05+06+07+08+09+0A+0B+0C+0D+0E+0F
00000000 <font color=red>00 00 11 11 22 22</font> <font color=blue>00 00 11 11</font> <font color=#00aa00>FF FF FF FF</font>
</pre>
(例2) [キャラ4×4人] + [敵1024バイト×4人] + [マップ256バイト]<br>
<pre>
Address +00+01+02+03+04+05+06+07+08+09+0A+0B+0C+0D+0E+0F
00000000 <font color=red>00 00 11 11 22 22 33 33</font> <font color=blue>00 00 11 11 22 22 33 33</font>
00000010 <font color=#00aa00>FF FF FF FF</font>
</pre>

上の例の場合(動的にメモリを確保するとして)、キャラ処理用の変数の確保量が違うため、<br>
敵情報やマップ情報を改造しようにもアドレスが特定できないわけですね。<br><br>

<h2>何故プログラムは変動アドレスに対応できるか？</h2>
さて、アドレスが変動してもプログラム側は自由にデータを参照できるわけですが、<br>
これは<b>「データの格納されたアドレスそのものがメモリ上にあり、それを利用する」</b>のです。<br><br>

先ほどの(例1)と(例2)の場合、マップ(緑文字)データは前者がアドレス0000000A、<br>
後者がアドレス00000010にありますが、プログラム中では以下のように処理されます。<br><br>
<pre>
Address  code
00012000 ldr r0,[_MapAddr]
00012004 bl _MapRoutine
00012008 bx r14
0001200C _MapAddr: .long 0000000A
</pre>
r0に_MapAddrラベルのアドレス0001200Cに格納された値(0x0000000A)をロードし、<br>
サブルーチンMapRoutineにジャンプする処理ですが、マップアドレスが変動するたびに<br>
_MapAddrの値を修正することで対応しているわけですね。<br>
(例2のメモリ配置になったとき、_MapRoutineには0x00000010が入っている）。<br>

<h2>これを追尾するのがBコード</h2>
プロアクションリプレイDS及びemuhasteで実装しているBコードは、<br>
このような指標(というか間接アドレス)を追跡することができます。<br>
上の例の場合に <b>B001200C 00000000</b> というコードを打つと、<br>
アドレス0001200Cに格納された値(0x0000000A)をベース値(オフセット)として定義し、<br>
D2000000 00000000コードが実行されるまで<br>
<font color=red><b>「全てのコードのアドレス部にベース値が加算」</b></font>されます。<br>
つまり変動アドレスを追尾し続けるわけです。<br>
この状態で 02024000 FFFFFFFF のコードを実行すると、<br>
本来は「アドレス02024000にFFFFFFFFを書き込め」という意味だったものが、<br>
「アドレス0202400A (02024000+0000000A) にFFFFFFFFを書き込め」となります。<br>

<h2>この変動アドレスの指標をサーチするには</h2>
まずは「変動アドレスの00000000番目」となる基準点を探します。<br>
これは「キャラ名」だったり「キャラ番号」だったりと色々あるので、<br>
根性と気合とガッツと直感で探してください。<br><br>

大まかな場所が特定できたら「それっぽい範囲」をPARAM & STRING SEARCHで探します。<br>
<font size=5 color=blue>I開始アドレス-終端アドレス</font><br>
<img src="./img_03.png" alt="例" border=2><br><br>

↑画像の場合、ターゲットとなるデータの格納アドレスが020B6200〜020B627Cの<br>
範囲内であると仮定して検索しており、いくつかのアドレスが該当している。<br>
後は<font color=red><b>「このアドレスの値を適当に書き換える」</b></font>と良い。<br>
もしも該当した場所の値が変動アドレスのための指標として使われているのであれば、<br>
これが狂うことにより、データがデタラメになるはずです。<br>
そして元の値に戻したときに再び正常になれば大当たり。<br>
これをBコードとして定義してやることで「変動アドレスの追尾用Bコード」が完成です。<br>


</BODY>
</HTML>